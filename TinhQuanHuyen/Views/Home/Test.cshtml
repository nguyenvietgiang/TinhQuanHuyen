@{
    ViewData["Title"] = "Home Page";
}

<div class="block-prv">
    <div class="content-select">
        <div class="block">
            <label for="selectedProvinces">Tỉnh/Thành phố</label>
            <div class="dropdown-container">
                <div class="input-select">
                    <input type="text" placeholder="Chọn tỉnh thành" id="timezone-input" />
                    <img class="arrow-down-icon" src="~/icons/arrow-down.svg" alt="icon" width="12px" />
                </div>
                <div class="dropdown-options" id="selectedProvinces">
                </div>
            </div>
        </div>

        <div class="block">
            <label for="selectedDistrict">Quận/Huyện</label>
            <select id="selectedDistrict" onchange="getWard()">
                <option value="">Chọn quận huyện</option>
            </select>
        </div>

        <div class="block">
            <label for="selectedWarn">Phường Xã</label>
            <select id="selectedWarn">
                <option value="">Chọn phường xã</option>
            </select>
        </div>
    </div>
</div>

<div class="parent">
    <button class="btn-gradient-2" onclick="handle()">Submit</button>
</div>

<h2 class="text-result"></h2>



<style>
    .dropdown-container {
        position: relative;
    }

    .input-select {
        width: 200px;
        height: 30px;
        display: flex;
        align-items: center;
        column-gap: 5px;
        border: solid 1px #ddd;
        padding: 4px;
        border-radius: 4px;
        position: relative;
    }

        .input-select .arrow-down-icon {
            transform: rotate( 0deg);
            transition: .5s;
        }

        .input-select:focus-within .arrow-down-icon {
            transform: rotate(180deg);
            transition: .5s;
        }

        .input-select:focus-within::before {
            position: absolute;
            content: "";
            top: 0;
            bottom: 0;
            right: 0;
            left: 0;
            outline: solid 2px #000;
            border-radius: 4px;
        }

        .input-select input {
            border: none;
            background-color: transparent;
            outline: none;
            width: 100%;
        }


            .input-select input::-webkit-input-placeholder {
                color: black;
            }

            .input-select input::-moz-placeholder {
                color: black;
            }

            .input-select input:-ms-input-placeholder {
                color: black;
            }

            .input-select input:-moz-placeholder {
                color: black;
            }

    .dropdown-container:focus-within .dropdown-options {
        display: block;
    }

    .dropdown-options {
        display: none;
        position: absolute;
        top: calc(100% + 1px);
        left: 0;
        right: 0;
        max-height: 200px;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        z-index: 10;
        background: white;
        border-radius: 4px;
        overflow-y: auto;
    }

        .dropdown-options .option {
            padding: 4px;
            font-size: 14px;
            line-height: 18px;
        }

            .dropdown-options .option:hover {
                background: #0d6efd;
                color: white;
                cursor: pointer;
            }

    .btn-gradient-2 {
        background: linear-gradient(white, white) padding-box, linear-gradient(to right, darkblue, darkorchid) border-box;
        border-radius: 50em;
        border: 4px solid transparent;
    }

    .btn-gradient-2 {
        position: relative;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        font-size: 1em;
        color: darkblue;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }


    label {
        display: block;
        margin-bottom: 10px;
    }

    select {
        width: 200px;
        height: 30px;
        padding: 4px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 200px;
    }


    .content-select {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
        flex-direction: row;
        align-items: center;
        justify-content: space-around;
    }

    .block-prv {
        margin-bottom: 32px;
    }

    .text-result {
        text-align: center;
    }
</style>
<script>

    const selectProvince = document.querySelector('#selectedProvinces');
    const provinceInput = document.querySelector('#timezone-input');
    const selectDistrict = document.querySelector('#selectedDistrict');
    const selectedWarn = document.querySelector('#selectedWarn');
    const BASE_URL = 'http://dev.s-erp.com.vn:9038/v1/countries/VN/provinces';

    function html([first, ...strings], ...values) {
        return values.reduce(
            (acc, cur) => acc.concat(cur, strings.shift()),
            [first]
        )
            .filter(x => x && x !== true || x === 0)
            .join("")
    }

    function renderProvince(data) {
        let provinceHtml = html`
          ${data.map(item => `
              <div class="option" onmousedown="getDistrict(${item.id}, '${item.name}')"> ${item.name} </div>`
        )
            }
        `;
        selectProvince.innerHTML = provinceHtml;
    }

    async function getProvinces() {
        const response = await fetch(`${BASE_URL}?page=1&size=66`);
        const { data, code } = await response.json();
        if (data && code === 200) {
            provinceData = data.content;
            return provinceData;
        }
    }

    async function getProvinceDataAsync() {
        const data = await getProvinces();
        renderProvince(data);
    }

    async function handleSearchProvince() {
        const data = await getProvinces();
        provinceInput.addEventListener('keyup', event => {
            const keyword = event.target.value.toLowerCase();
            const newData = data.filter(item => item.name.toLowerCase().includes(keyword));
            renderProvince(newData);
        })
    }

    async function handleFocus() {
        const data = await getProvinces();
        provinceInput.addEventListener('focus', event => {
            const keyword = provinceInput.value;
            const newData = data.filter(item => item.name.toLowerCase().includes(keyword));
            renderProvince(newData);
        })
    }

    function getDistrict(id, name) {
        provinceInput.value = name;
        while (selectDistrict.options.length > 1) {
            selectDistrict.remove(1);
        }
        fetch(`${BASE_URL}/${id}/districts`)
            .then(response => response.json())
            .then(data => {
                data.data.content.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.id;
                    option.textContent = country.name;
                    selectDistrict.add(option);
                });
            })
            .catch(error => console.error(error));
    }

    function getWard() {
        this.getCountry(select.value, selectDistrict.value);
    }

    function getCountry(idProvinces, idDistrict) {
        if (!idProvinces && !idDistrict) {
            return;
        }
        while (selectedWarn.options.length > 1) {
            selectedWarn.remove(1);
        }

        fetch(`${BASE_URL}/${idProvinces}/districts/${idDistrict}/wards`)
            .then(response => response.json())
            .then(data => {
                data.data.content.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.id;
                    option.textContent = country.name;
                    selectedWarn.add(option);
                });
            })
            .catch(error => console.error(error));
    }

    function handle() {
        var resultText = document.querySelector(".text-result");
        resultText.innerHTML = " Tỉnh " + select.options[select.selectedIndex].text + " Huyện " +
            selectDistrict.options[selectDistrict.selectedIndex].text + " Phường " +
            selectedWarn.options[selectedWarn.selectedIndex].text
    }

    function main() {
        getProvinces();
        getProvinceDataAsync();
        handleSearchProvince();
        handleFocus();
    }

    main();

</script>

