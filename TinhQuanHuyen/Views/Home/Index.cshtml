@using System.Data
@model TimezoneResponsePaginationModel;

<div class="block-prv">
    <div class="content-select">
        <div class="block">
            <label for="selectedTimezones">Múi Giờ</label>
            <div class="dropdown-container">
                <form class="form-inline my-2 my-lg-0" style="display: flex">
                <div class="input-select">
                        <input type="text" value="@ViewBag.FullTextSearch" name="FullTextSearch" placeholder="Chọn múi giờ" id="timezone-input" />
                </div>
                <div>
                   <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Tìm</button>
                </div>
                </form>
                <div class="dropdown-options" id="selectedTimezones">
                </div>
            </div>
        </div>
    </div>
</div>
<div id="btnContainer">
    <button class="btn" onclick="listView()"><i class="fa fa-bars"></i> List</button>
    <button class="btn active" onclick="gridView()"><i class="fa fa-th-large"></i> Grid</button>

</div>
<br>

<div class="row">
    @foreach (TimezoneResponseModel row in Model.Content)
    {
        <div class="column">
            <a href="#@row.Code">
                <h2>@row.Name</h2>
            </a>
            <p>@row.Description</p>
            <p>@row.CreatedOnDate</p>
        </div>
    }
</div>
@for (int i = 1; i <= ViewBag.TotolPage; i++)
{
    <div class="pagination">
        <a href="@Url.Action("TimeZone","Home")?Page=@i">@i</a>
    </div>
}

<style>
    .dropdown-container {
        position: relative;
    }

    .input-select {
        width: 200px;
        height: 30px;
        display: flex;
        align-items: center;
        column-gap: 5px;
        border: solid 1px #ddd;
        padding: 4px;
        border-radius: 4px;
        position: relative;
    }

        .input-select .arrow-down-icon {
            transform: rotate( 0deg);
            transition: .5s;
        }

        .input-select:focus-within .arrow-down-icon {
            transform: rotate(180deg);
            transition: .5s;
        }

        .input-select:focus-within::before {
            position: absolute;
            content: "";
            top: 0;
            bottom: 0;
            right: 0;
            left: 0;
            outline: solid 2px #000;
            border-radius: 4px;
        }

        .input-select input {
            border: none;
            background-color: transparent;
            outline: none;
            width: 100%;
        }


            .input-select input::-webkit-input-placeholder {
                color: black;
            }

            .input-select input::-moz-placeholder {
                color: black;
            }

            .input-select input:-ms-input-placeholder {
                color: black;
            }

            .input-select input:-moz-placeholder {
                color: black;
            }

    .dropdown-container:focus-within .dropdown-options {
        display: block;
    }

    .dropdown-options {
        display: none;
        position: absolute;
        top: calc(100% + 1px);
        left: 0;
        right: 0;
        max-height: 200px;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        z-index: 10;
        background: white;
        border-radius: 4px;
        overflow-y: auto;
    }

        .dropdown-options .option {
            padding: 4px;
            font-size: 14px;
            line-height: 18px;
        }

            .dropdown-options .option:hover {
                background: #0d6efd;
                color: white;
                cursor: pointer;
            }

    .btn-gradient-2 {
        background: linear-gradient(white, white) padding-box, linear-gradient(to right, darkblue, darkorchid) border-box;
        border-radius: 50em;
        border: 4px solid transparent;
    }

    .btn-gradient-2 {
        position: relative;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        font-size: 1em;
        color: darkblue;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }


    label {
        display: block;
        margin-bottom: 10px;
    }

    select {
        width: 200px;
        height: 30px;
        padding: 4px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 200px;
    }


    .content-select {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
        flex-direction: row;
        align-items: center;
        justify-content: space-around;
    }

    .block-prv {
        margin-bottom: 32px;
    }

    .text-result {
        text-align: center;
    }
</style>
<script>
    const selectTimezone = document.querySelector('#selectedTimezones');
    const TimezoneInput = document.querySelector('#timezone-input');
    const BASE_URL = 'http://dev.s-erp.com.vn:9038/v1/timezones';

    function html([first, ...strings], ...values) {
        return values.reduce(
            (acc, cur) => acc.concat(cur, strings.shift()),
            [first]
        )
            .filter(x => x && x !== true || x === 0)
            .join("")
    }
    function renderTimezone(data) {
        let TimezoneHtml = html`
          ${data.map(item => `
                  <div class="option" onmousedown="getTime(${item.code}, '${item.name}')"> ${item.code} - ${item.name} </div>`
        )
            }
        `;
        selectTimezone.innerHTML = TimezoneHtml;
    }
    async function getTimezones() {
        const response = await fetch(`${BASE_URL}?page=1&size=73`);
        const { data, code } = await response.json();
        if (data && code === 200) {
            TimezoneData = data.content;
            return TimezoneData;
        }
    }
    async function getTimezoneDataAsync() {
        const data = await getTimezones();
        renderTimezone(data);
    }
    async function handleSearchTimezone() {
        const data = await getTimezones();
        TimezoneInput.addEventListener('keyup', event => {
            const keyword = event.target.value.toLowerCase();
            const newData = data.filter(item => item.code.toLowerCase().includes(keyword));
            renderTimezone(newData);
        })
    }
    async function handleFocus() {
        const data = await getTimezones();
        TimezoneInput.addEventListener('focus', event => {
            const keyword = TimezoneInput.value;
            const newData = data.filter(item => item.code.toLowerCase().includes(keyword));
            renderTimezone(newData);
        })
    }
    function main() {
        getTimezones();
        getTimezoneDataAsync();
        handleSearchTimezone();
        handleFocus();
    }
    main();
</script>


